"""
Django settings for Ai_Search project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os
import dj_database_url
# --------------------------------------------------
# BASE SETTINGS
# --------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-&o$%vg$ahkqs7l-!sjv9b=n61*2op-(7dytrpmnupa&%gxv*a7'
DEBUG = True

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "xpg4jlf7-8000.inc1.devtunnels.ms",  # devtunnel hostZ
]

# --------------------------------------------------
# INSTALLED APPS
# --------------------------------------------------
INSTALLED_APPS = [
    # Django default apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',

    # apps
    'courses',
]

# --------------------------------------------------
# MIDDLEWARE
# --------------------------------------------------
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # CORS middleware at the top
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# --------------------------------------------------
# URL & WSGI
# --------------------------------------------------
ROOT_URLCONF = 'Ai_Search.urls'

WSGI_APPLICATION = 'Ai_Search.wsgi.application'

# --------------------------------------------------
# REST FRAMEWORK CONFIG
# --------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Allow public registration
    ]
}

# --------------------------------------------------
# TEMPLATES
# --------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.29.106', 'https://xpg4jlf7-8000.inc1.devtunnels.ms/']

ALLOWED_HOSTS = ['*']

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    '192.168.29.106',
    '192.168.118.1',
    'xpg4jlf7-8000.inc1.devtunnels.ms',
]


# --------------------------------------------------
# CORS & CSRF CONFIG
# --------------------------------------------------
CORS_ALLOWED_ORIGINS = [
    "https://xpg4jlf7-8000.inc1.devtunnels.ms",
    "http://localhost:5173",   # Vite dev server
    "http://127.0.0.1:5173",
    "http://localhost:3000",   # CRA
    "http://127.0.0.1:3000",
    "http://192.168.29.106:8000",
]

CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://xpg4jlf7-8000.inc1.devtunnels.ms",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# --------------------------------------------------
# DATABASE
# --------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'aisearch',
        'USER': 'root',
        'PASSWORD': 'mysql',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}

# --------------------------------------------------
# PASSWORD VALIDATION
# --------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# --------------------------------------------------
# INTERNATIONALIZATION
# --------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# --------------------------------------------------
# STATIC FILES
# --------------------------------------------------
STATIC_URL = 'static/'

# --------------------------------------------------
# PRIMARY KEY FIELD
# --------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




BASE_DIR = Path(__file__).resolve().parent.parent

# SECRET_KEY comes from env
SECRET_KEY = os.environ.get("SECRET_KEY", "dev-secret")

# IMPORTANT: set DEBUG from env
DEBUG = os.environ.get("DEBUG", "False") == "True"

# ALLOWED_HOSTS â€” Render exposes the host in RENDER_EXTERNAL_HOSTNAME
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")
# in case Render provided the hostname, append it (defensive)
if os.environ.get("RENDER_EXTERNAL_HOSTNAME"):
    ALLOWED_HOSTS.append(os.environ.get("RENDER_EXTERNAL_HOSTNAME"))

# Database from DATABASE_URL (Render provides it when you add a Postgres service)
DATABASES = {
    "default": dj_database_url.config(conn_max_age=600, ssl_require=True)
}

# Static files
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
# Use WhiteNoise to serve static files
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # <-- add this right after SecurityMiddleware
    # ... rest of your middleware
]

# Optional: for compressed/hashed static filenames in production
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"